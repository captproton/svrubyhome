<%
  dom_id ||= 'menu'
  css ||= 'menu'
  hide_children = RefinerySetting.find_or_set(:menu_hide_children, false) if hide_children.nil?
  # Select top menu items unless 'roots' is supplied.
  collection ||= @menu_pages
  caching = ((defined?(cache_menu) && cache_menu) || RefinerySetting.find_or_set(:cache_menu, false)) && File.writable?(Rails.cache.cache_path)
  cache_if(caching && !user_signed_in?, [Refinery.base_cache_key, "pages_menus", dom_id, Globalize.locale, request.path].join('_')) do
    if (roots ||= collection.select{|p| p.parent_id.nil?}).present?
      # In order to match items that aren't shown in menu and highlight their associations.
      # This can be supplied if the logic is different in your case.
      unless defined?(selected_item)
        selected_item = collection.detect{|page| selected_page?(page)}
        selected_item = @page if selected_item.nil?
      end
  -%>
  <!-- <nav id='<%= dom_id %>' class='<%= %W(#{css} clearfix).join(' ') %>'> -->
	<div role="navigation" id="navigation" class="yom-mod yom-nav">
		<div class="bd" id="yui_3_3_0_1_1304864398736114">
			<div class="nav" id="yui_3_3_0_1_1304864398736113">
				<div class="nav-stack nav-0" id="yui_3_3_0_1_1304864398736126">
					<ul class="yog-grid" id="yui_3_3_0_1_1304864398736125">
    <!-- <ul> -->
          <%= render :partial => "/shared/menu_branch",
                     :collection => roots,
                     :locals => {
                       :hide_children => hide_children,
                       :sibling_count => (roots.length - 1),
                       :collection => collection,
                       :selected_item => selected_item,
                       :apply_css => true #if you don't care about class='first' class='last' or class='selected' set apply_css to false for speed.
                     }
          -%>
					</ul>
				</div>
			</div>
		</div>
	</div>
        <!-- </ul>
      </nav> -->
  <% end -%>
<% end -%>
